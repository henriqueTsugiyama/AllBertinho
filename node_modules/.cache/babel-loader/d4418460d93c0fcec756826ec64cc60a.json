{"ast":null,"code":"import { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport BaseForm from './BaseForm';\nimport { toast } from 'react-toastify';\nimport api from '../../services/api';\nconst FormCliente = withFormik({\n  mapPropsToValues({\n    email,\n    name,\n    password\n  }) {\n    return {\n      email: '',\n      name: '',\n      password: '',\n      passwordConfirmation: ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Este não é um email válido.').required('Este campo é obrigatório.'),\n    name: Yup.string().required('Este campo é obrigatório.'),\n    password: Yup.string().required('Este campo é obrigatório').min('8', `Sua senha deve conter ao menos 8 caracteres.`),\n    passwordConfirmation: Yup.string().oneOf([Yup.ref('password'), null], 'A senha não corresponde à anterior.')\n  }),\n\n  async handleSubmit(values, {\n    resetForm,\n    setErrors,\n    setSubmitting\n  }) {\n    try {\n      const thisUser = {\n        email: values.email,\n        name: values.name,\n        password: values.password\n      };\n      const {\n        _id\n      } = await api.post(`/user`, thisUser); // props.dispatch(addProduct(values));\n      // setSubmitting(false);\n\n      resetForm();\n      toast.success(`Cadastro realizado com sucesso! Faça seu login :)`);\n    } catch (err) {\n      toast.error('Esse email ja existe!');\n    }\n\n    setSubmitting(false);\n  } //close handleSubmit\n\n\n})(BaseForm);\nexport default FormCliente;","map":{"version":3,"sources":["/home/henrique_yasuo/Documents/AllBertinho/src/components/FormCliente/index.js"],"names":["withFormik","Yup","BaseForm","toast","api","FormCliente","mapPropsToValues","email","name","password","passwordConfirmation","validationSchema","object","shape","string","required","min","oneOf","ref","handleSubmit","values","resetForm","setErrors","setSubmitting","thisUser","_id","post","success","err","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,MAAMC,WAAW,GACfL,UAAU,CAAE;AACZM,EAAAA,gBAAgB,CAAC;AACfC,IAAAA,KADe;AAEfC,IAAAA,IAFe;AAGfC,IAAAA;AAHe,GAAD,EAIb;AACD,WAAO;AACLF,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,IAAI,EAAE,EAFD;AAGLC,MAAAA,QAAQ,EAAE,EAHL;AAILC,MAAAA,oBAAoB,EAAE;AAJjB,KAAP;AAMD,GAZW;;AAaZC,EAAAA,gBAAgB,EAAEV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;AACnCN,IAAAA,KAAK,EAAEN,GAAG,CAACa,MAAJ,GAAaP,KAAb,CAAmB,6BAAnB,EAAkDQ,QAAlD,CAA2D,2BAA3D,CAD4B;AAEnCP,IAAAA,IAAI,EAAEP,GAAG,CAACa,MAAJ,GAAaC,QAAb,CAAsB,2BAAtB,CAF6B;AAGnCN,IAAAA,QAAQ,EAAER,GAAG,CAACa,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,EAAkDC,GAAlD,CAAsD,GAAtD,EAA4D,8CAA5D,CAHyB;AAInCN,IAAAA,oBAAoB,EAAET,GAAG,CAACa,MAAJ,GACpBG,KADoB,CACd,CAAChB,GAAG,CAACiB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADc,EACe,qCADf;AAJa,GAAnB,CAbN;;AAoBZ,QAAMC,YAAN,CAAmBC,MAAnB,EAA2B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,GAA3B,EAAoE;AAClE,QAAI;AACF,YAAMC,QAAQ,GAAG;AACfjB,QAAAA,KAAK,EAAEa,MAAM,CAACb,KADC;AAEfC,QAAAA,IAAI,EAAEY,MAAM,CAACZ,IAFE;AAGfC,QAAAA,QAAQ,EAAEW,MAAM,CAACX;AAHF,OAAjB;AAMA,YAAM;AAAEgB,QAAAA;AAAF,UAAU,MAAMrB,GAAG,CAACsB,IAAJ,CAAU,OAAV,EAAkBF,QAAlB,CAAtB,CAPE,CASF;AACA;;AAEAH,MAAAA,SAAS;AACTlB,MAAAA,KAAK,CAACwB,OAAN,CAAe,mDAAf;AACD,KAdD,CAcC,OAAMC,GAAN,EAAW;AACVzB,MAAAA,KAAK,CAAC0B,KAAN,CAAY,uBAAZ;AACD;;AACDN,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAvCW,CAuCX;;;AAvCW,CAAF,CAAV,CAwCCrB,QAxCD,CADF;AA6CA,eAAeG,WAAf","sourcesContent":["import { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport BaseForm from './BaseForm';\nimport { toast } from 'react-toastify';\n\n\nimport api from '../../services/api';\n\nconst FormCliente =\n  withFormik ({\n  mapPropsToValues({\n    email,\n    name,\n    password,\n  }) {\n    return {\n      email: '',\n      name: '',\n      password: '',\n      passwordConfirmation: '',\n    }\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Este não é um email válido.').required('Este campo é obrigatório.'),\n    name: Yup.string().required('Este campo é obrigatório.'),\n    password: Yup.string().required('Este campo é obrigatório').min('8', `Sua senha deve conter ao menos 8 caracteres.`),\n    passwordConfirmation: Yup.string()\n     .oneOf([Yup.ref('password'), null], 'A senha não corresponde à anterior.')\n  }),\n  async handleSubmit(values, { resetForm, setErrors, setSubmitting }) {\n    try {\n      const thisUser = {\n        email: values.email,\n        name: values.name,\n        password: values.password,\n      }\n\n      const { _id } = await api.post(`/user`, thisUser);\n\n      // props.dispatch(addProduct(values));\n      // setSubmitting(false);\n      \n      resetForm();\n      toast.success(`Cadastro realizado com sucesso! Faça seu login :)`);\n    }catch(err) {\n      toast.error('Esse email ja existe!');\n    }\n    setSubmitting(false);\n  }//close handleSubmit\n})(BaseForm);\n\n\n\nexport default FormCliente;\n"]},"metadata":{},"sourceType":"module"}