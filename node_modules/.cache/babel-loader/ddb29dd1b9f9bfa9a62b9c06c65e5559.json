{"ast":null,"code":"import _regeneratorRuntime from\"/home/henrique_yasuo/Documents/AllBertinho/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/henrique_yasuo/Documents/AllBertinho/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{withFormik}from'formik';import*as Yup from'yup';import BaseForm from'./BaseForm';import{toast}from'react-toastify';import api from'../../services/api';var FormCliente=withFormik({mapPropsToValues:function mapPropsToValues(_ref){var email=_ref.email,name=_ref.name,password=_ref.password;return{email:'',name:'',password:'',passwordConfirmation:''};},validationSchema:Yup.object().shape({email:Yup.string().email('Este não é um email válido.').required('Este campo é obrigatório.'),name:Yup.string().required('Este campo é obrigatório.'),password:Yup.string().required('Este campo é obrigatório').min('8',\"Sua senha deve conter ao menos 8 caracteres.\"),passwordConfirmation:Yup.string().oneOf([Yup.ref('password'),null],'A senha não corresponde à anterior.')}),handleSubmit:function handleSubmit(values,_ref2){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var resetForm,setErrors,setSubmitting,thisUser,_yield$api$post,_id;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:resetForm=_ref2.resetForm,setErrors=_ref2.setErrors,setSubmitting=_ref2.setSubmitting;_context.prev=1;thisUser={email:values.email,name:values.name,password:values.password};_context.next=5;return api.post(\"/user\",thisUser);case 5:_yield$api$post=_context.sent;_id=_yield$api$post._id;// props.dispatch(addProduct(values));\n// setSubmitting(false);\nresetForm();toast.success(\"Cadastro realizado com sucesso! Fa\\xE7a seu login :)\");_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);toast.error('Esse email ja existe!');case 14:setSubmitting(false);case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}))();}//close handleSubmit\n})(BaseForm);export default FormCliente;","map":{"version":3,"sources":["/home/henrique_yasuo/Documents/AllBertinho/src/components/FormCliente/index.js"],"names":["withFormik","Yup","BaseForm","toast","api","FormCliente","mapPropsToValues","email","name","password","passwordConfirmation","validationSchema","object","shape","string","required","min","oneOf","ref","handleSubmit","values","resetForm","setErrors","setSubmitting","thisUser","post","_id","success","error"],"mappings":"+TAAA,OAASA,UAAT,KAA2B,QAA3B,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,KAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,OAASC,KAAT,KAAsB,gBAAtB,CAGA,MAAOC,CAAAA,GAAP,KAAgB,oBAAhB,CAEA,GAAMC,CAAAA,WAAW,CACfL,UAAU,CAAE,CACZM,gBADY,gCAKT,IAHDC,CAAAA,KAGC,MAHDA,KAGC,CAFDC,IAEC,MAFDA,IAEC,CADDC,QACC,MADDA,QACC,CACD,MAAO,CACLF,KAAK,CAAE,EADF,CAELC,IAAI,CAAE,EAFD,CAGLC,QAAQ,CAAE,EAHL,CAILC,oBAAoB,CAAE,EAJjB,CAAP,CAMD,CAZW,CAaZC,gBAAgB,CAAEV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB,CACnCN,KAAK,CAAEN,GAAG,CAACa,MAAJ,GAAaP,KAAb,CAAmB,6BAAnB,EAAkDQ,QAAlD,CAA2D,2BAA3D,CAD4B,CAEnCP,IAAI,CAAEP,GAAG,CAACa,MAAJ,GAAaC,QAAb,CAAsB,2BAAtB,CAF6B,CAGnCN,QAAQ,CAAER,GAAG,CAACa,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,EAAkDC,GAAlD,CAAsD,GAAtD,gDAHyB,CAInCN,oBAAoB,CAAET,GAAG,CAACa,MAAJ,GACpBG,KADoB,CACd,CAAChB,GAAG,CAACiB,GAAJ,CAAQ,UAAR,CAAD,CAAsB,IAAtB,CADc,CACe,qCADf,CAJa,CAAnB,CAbN,CAoBNC,YApBM,uBAoBOC,MApBP,OAoBwD,sQAAvCC,SAAuC,OAAvCA,SAAuC,CAA5BC,SAA4B,OAA5BA,SAA4B,CAAjBC,aAAiB,OAAjBA,aAAiB,iBAE1DC,QAF0D,CAE/C,CACfjB,KAAK,CAAEa,MAAM,CAACb,KADC,CAEfC,IAAI,CAAEY,MAAM,CAACZ,IAFE,CAGfC,QAAQ,CAAEW,MAAM,CAACX,QAHF,CAF+C,uBAQ1CL,CAAAA,GAAG,CAACqB,IAAJ,SAAkBD,QAAlB,CAR0C,sCAQxDE,GARwD,iBAQxDA,GARwD,CAUhE;AACA;AAEAL,SAAS,GACTlB,KAAK,CAACwB,OAAN,yDAdgE,iFAgBhExB,KAAK,CAACyB,KAAN,CAAY,uBAAZ,EAhBgE,QAkBlEL,aAAa,CAAC,KAAD,CAAb,CAlBkE,0EAmBnE;AAvCW,CAAF,CAAV,CAwCCrB,QAxCD,CADF,CA6CA,cAAeG,CAAAA,WAAf","sourcesContent":["import { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport BaseForm from './BaseForm';\nimport { toast } from 'react-toastify';\n\n\nimport api from '../../services/api';\n\nconst FormCliente =\n  withFormik ({\n  mapPropsToValues({\n    email,\n    name,\n    password,\n  }) {\n    return {\n      email: '',\n      name: '',\n      password: '',\n      passwordConfirmation: '',\n    }\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Este não é um email válido.').required('Este campo é obrigatório.'),\n    name: Yup.string().required('Este campo é obrigatório.'),\n    password: Yup.string().required('Este campo é obrigatório').min('8', `Sua senha deve conter ao menos 8 caracteres.`),\n    passwordConfirmation: Yup.string()\n     .oneOf([Yup.ref('password'), null], 'A senha não corresponde à anterior.')\n  }),\n  async handleSubmit(values, { resetForm, setErrors, setSubmitting }) {\n    try {\n      const thisUser = {\n        email: values.email,\n        name: values.name,\n        password: values.password,\n      }\n\n      const { _id } = await api.post(`/user`, thisUser);\n\n      // props.dispatch(addProduct(values));\n      // setSubmitting(false);\n      \n      resetForm();\n      toast.success(`Cadastro realizado com sucesso! Faça seu login :)`);\n    }catch(err) {\n      toast.error('Esse email ja existe!');\n    }\n    setSubmitting(false);\n  }//close handleSubmit\n})(BaseForm);\n\n\n\nexport default FormCliente;\n"]},"metadata":{},"sourceType":"module"}